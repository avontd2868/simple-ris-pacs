
//------------------------------------------------------------------------------
//  Mongo Shell Scripts
How to drop a corrupt server-side database of a running Meteor app
# meteor; meteor mongo;
> show dbs; db use meteor; show collections; db.anatomy.drop(); exit



//--------------------------------------------------------------------
// SQL to generate Assets Collection

SELECT *
FROM dam.indexed_assets
LEFT JOIN locations ON indexed_assets.location_id = locations.id
LEFT JOIN scales ON indexed_assets.scale_id = scales.id
LEFT JOIN projects ON indexed_assets.project_id = projects.id
LEFT JOIN urls ON indexed_assets.id = urls.indexed_asset_id
;

// import the the library data into a staging mongodb instance
mongoimport -d staging -c assets < library_assets.json --jsonArray



//--------------------------------------------------------------------
// SQL to generate Dataset Collection

SELECT * FROM dam.datasets
LEFT JOIN modalities ON datasets.modality_id = modalities.id
LEFT JOIN datatypes ON datasets.datatype_id = datatypes.id
;

// import the the library data into a staging mongodb instance
mongoimport -d staging -c datasets < library_datasets.json --jsonArray



//--------------------------------------------------------------------
// Copy from External Database to Meteor Database

// connect to the meteor mongodb
mongo --port 3002

// copy collections from staging database into meteor database
db.copyDatabase('staging', 'meteor', 'localhost');



//------------------------------------------------------------------------------
//  Stale Database Tags

db.collection.update( { field: { $exists: true } }, {$unset: { field : 1 } }, false, true)

//  'field' is your deprecated field and collection is the collection it was removed from.
//  The false and true are at the end because you need to enable multi update so that the query updates all of the documents in the collection (not just the first match) and the general update command is of the form db.collection.update( criteria, objNew, upsert, multi ).
